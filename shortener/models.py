import datetime
import string
from random import choices

from django.conf import settings
from django.db import models
from django.utils import timezone


def generate_short_code():
    return "".join(choices(string.ascii_letters + string.digits, k=4))


class Shortener(models.Model):
    """
    Model representing a shortened URL.

    Attributes:
        user (ForeignKey): Optional reference to the user who created the shortener.
        url (URLField): The original URL to be shortened.
        short_code (CharField): Unique short code for the URL, generated by default.
        password (CharField): Optional password for accessing the shortened URL.
        created_at (DateTimeField): Timestamp when the shortener was created.
        expires_at (DateTimeField): Timestamp when the shortener expires.
        views (IntegerField): Number of times the shortened URL has been accessed.
        available (BooleanField): Indicates if the shortener is currently available.

    Methods:
        save(*args, **kwargs): Overrides save to set expiration based on user status.
        is_expired(): Returns True if the shortener has expired.
        __str__(): Returns a string representation of the shortener.
    """

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True
    )
    url = models.URLField()
    short_code = models.CharField(
        max_length=10, unique=True, default=generate_short_code
    )
    password = models.CharField(max_length=32, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField(null=True, blank=True)
    views = models.IntegerField(default=0)
    available = models.BooleanField(default=True)

    def save(self, *args, **kwargs):
        if not self.expires_at:
            if self.user is None:
                self.expires_at = timezone.now() + datetime.timedelta(hours=12)
            else:
                self.expires_at = timezone.now() + datetime.timedelta(days=30)
        super().save(*args, **kwargs)

    def is_expired(self):
        return self.expires_at and timezone.now() > self.expires_at

    def __str__(self):
        return f"{self.url} --> {self.short_code}"
